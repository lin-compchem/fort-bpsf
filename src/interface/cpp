#include <string>
#include <cstring>
#include <iostream>
#include <stdio.h>
#include <iostream>
#include <stdlib.h>
// RapidJSON Headers
#include <rapidjson/rapidjson.h>
#include <rapidjson/document.h>
#include <rapidjson/prettywriter.h>
// Program includes

using namespace rapidjson;
using namespace std;

class JSON_Message {
    public:
        // General Vars
        Document document; // This is the object to parse the JSON string into
        const char my_name[8] = "generic"; // Name of message for error messages
        // Member functions
        JSON_Message(string &json_string, bool verbose_flag=false);
    private:
        bool verbose = false; // Flag for verbosity
        void initialize(string &json_string);
        void parseDocument();
        void setupDocument(string &json_string);
        void parseFail();
};
// Constructor
JSON_Message::JSON_Message(string &json_string, bool verbose_flag);
   : verbose(verbose_flag) {
   initialize();
}
// Function for exiting if the document parse doesn't work
void JSON_Message::parseFail() {
    cerr << "Failure to Parse " << my_name << " Message" << endl;
    exit(EXIT_FAILURE);
}
// This function is called to initiate parsing the JSON string into the
// document object of the class and validate the object.
void JSON_Message::initialize(string &json_string) {
    setupDocument(json_string);
    parseDocument();
} // This function does the parsing of the JSON string into the document object
void JSON_Message::setupDocument(json_string) {
    if (verbose) {
        cout << "Created JSON_Message " << my_name << endl;
        cout << "Parsing JSON string: " << endl << json_string << endl;
    }
    if (document.Parse(json_string.c_str()).HasParseError()) {
        parseFail();
    }
    return
}

class ModelVersionStatus: public JSON_Message {
    public:
        // General Vars
        const char my_name[21] = "Model Version Status"; // Name of message for error messages
        ModelVersionStatus(string &json_string, bool verbose_flag=false)
            :verbose(verbose_flag) {
                initialize(json_string);
            }
    private:
        // Vars to read from message
        string version;
        string state;
        string error_code;
        string error_message;

        // Message constants:
        const char mmvs[21] = "model_version_status",
                   mversion[8] = "version",
                   mstate[6] = "state",
                   mstatus[7] = "status",
                   merror_code[11] = "error_code",
                   merror_message[14] = "error_message";

        // Member functions
        void Parser() {
            // Assert that there is a member named "model_version_status"
            assert(document.HasMember(mvs));

            // Get the version and the state
            version = document[mvs][0]["version"].GetString();
            cout << document[mvs][0]["state"].GetString() << "\n";
        }
};
